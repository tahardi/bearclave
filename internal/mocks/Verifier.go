// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/tahardi/bearclave/internal/attestation"
)

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

type Verifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Verifier) EXPECT() *Verifier_Expecter {
	return &Verifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function for the type Verifier
func (_mock *Verifier) Verify(report []byte, options ...attestation.VerifyOption) ([]byte, error) {
	var tmpRet mock.Arguments
	if len(options) > 0 {
		tmpRet = _mock.Called(report, options)
	} else {
		tmpRet = _mock.Called(report)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte, ...attestation.VerifyOption) ([]byte, error)); ok {
		return returnFunc(report, options...)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte, ...attestation.VerifyOption) []byte); ok {
		r0 = returnFunc(report, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte, ...attestation.VerifyOption) error); ok {
		r1 = returnFunc(report, options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Verifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Verifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - report
//   - options
func (_e *Verifier_Expecter) Verify(report interface{}, options ...interface{}) *Verifier_Verify_Call {
	return &Verifier_Verify_Call{Call: _e.mock.On("Verify",
		append([]interface{}{report}, options...)...)}
}

func (_c *Verifier_Verify_Call) Run(run func(report []byte, options ...attestation.VerifyOption)) *Verifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := args[1].([]attestation.VerifyOption)
		run(args[0].([]byte), variadicArgs...)
	})
	return _c
}

func (_c *Verifier_Verify_Call) Return(userdata []byte, err error) *Verifier_Verify_Call {
	_c.Call.Return(userdata, err)
	return _c
}

func (_c *Verifier_Verify_Call) RunAndReturn(run func(report []byte, options ...attestation.VerifyOption) ([]byte, error)) *Verifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}
