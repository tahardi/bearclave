// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IPC is an autogenerated mock type for the IPC type
type IPC struct {
	mock.Mock
}

type IPC_Expecter struct {
	mock *mock.Mock
}

func (_m *IPC) EXPECT() *IPC_Expecter {
	return &IPC_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *IPC) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPC_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type IPC_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *IPC_Expecter) Close() *IPC_Close_Call {
	return &IPC_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *IPC_Close_Call) Run(run func()) *IPC_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IPC_Close_Call) Return(_a0 error) *IPC_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IPC_Close_Call) RunAndReturn(run func() error) *IPC_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Receive provides a mock function with given fields: ctx
func (_m *IPC) Receive(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Receive")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPC_Receive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Receive'
type IPC_Receive_Call struct {
	*mock.Call
}

// Receive is a helper method to define mock.On call
//   - ctx context.Context
func (_e *IPC_Expecter) Receive(ctx interface{}) *IPC_Receive_Call {
	return &IPC_Receive_Call{Call: _e.mock.On("Receive", ctx)}
}

func (_c *IPC_Receive_Call) Run(run func(ctx context.Context)) *IPC_Receive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *IPC_Receive_Call) Return(data []byte, err error) *IPC_Receive_Call {
	_c.Call.Return(data, err)
	return _c
}

func (_c *IPC_Receive_Call) RunAndReturn(run func(context.Context) ([]byte, error)) *IPC_Receive_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: ctx, data
func (_m *IPC) Send(ctx context.Context, data []byte) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPC_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type IPC_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
func (_e *IPC_Expecter) Send(ctx interface{}, data interface{}) *IPC_Send_Call {
	return &IPC_Send_Call{Call: _e.mock.On("Send", ctx, data)}
}

func (_c *IPC_Send_Call) Run(run func(ctx context.Context, data []byte)) *IPC_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *IPC_Send_Call) Return(err error) *IPC_Send_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IPC_Send_Call) RunAndReturn(run func(context.Context, []byte) error) *IPC_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewIPC creates a new instance of IPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPC {
	mock := &IPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
