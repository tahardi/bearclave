// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewAttester creates a new instance of Attester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAttester(t interface {
	mock.TestingT
	Cleanup(func())
}) *Attester {
	mock := &Attester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Attester is an autogenerated mock type for the Attester type
type Attester struct {
	mock.Mock
}

type Attester_Expecter struct {
	mock *mock.Mock
}

func (_m *Attester) EXPECT() *Attester_Expecter {
	return &Attester_Expecter{mock: &_m.Mock}
}

// Attest provides a mock function for the type Attester
func (_mock *Attester) Attest(userdata []byte) ([]byte, error) {
	ret := _mock.Called(userdata)

	if len(ret) == 0 {
		panic("no return value specified for Attest")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return returnFunc(userdata)
	}
	if returnFunc, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = returnFunc(userdata)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = returnFunc(userdata)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Attester_Attest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attest'
type Attester_Attest_Call struct {
	*mock.Call
}

// Attest is a helper method to define mock.On call
//   - userdata
func (_e *Attester_Expecter) Attest(userdata interface{}) *Attester_Attest_Call {
	return &Attester_Attest_Call{Call: _e.mock.On("Attest", userdata)}
}

func (_c *Attester_Attest_Call) Run(run func(userdata []byte)) *Attester_Attest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Attester_Attest_Call) Return(attestation []byte, err error) *Attester_Attest_Call {
	_c.Call.Return(attestation, err)
	return _c
}

func (_c *Attester_Attest_Call) RunAndReturn(run func(userdata []byte) ([]byte, error)) *Attester_Attest_Call {
	_c.Call.Return(run)
	return _c
}
